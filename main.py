import os
import uuid
from random import seed

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CallbackContext, MessageHandler, Filters, ConversationHandler, CallbackQueryHandler
import logging
from telegram.ext import CommandHandler
from gtts import gTTS
import pandas as pd


dictionary = pd.read_excel('dict.xls', 0, header=None).transpose().stack().reset_index(drop=True)
dicts = [
    ('–°–ª–æ–≤–∞—Ä—å (1-3)', dictionary[:3*64].reset_index(drop=True)),
    ('–°–ª–æ–≤–∞—Ä—å (4-6)', dictionary[3*64:].reset_index(drop=True)),
    ('56 –Ω–∞—Ä–µ—á–∏–π', pd.read_excel('adverbs.xls', 0, header=None).stack()),
    ('–ù –∏ –ù–ù', pd.read_excel('nn.xls', 0, header=None).stack()),
    ('–ü—Ä–∏/–ü—Ä–µ', pd.read_excel('pri_pre.xls', 0, header=None).stack()),
]

updater = Updater(token=os.environ['TOKEN'], use_context=True)
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
dispatcher = updater.dispatcher

PLAYING, SELECT, GAME_OVER = range(3)


def start(update: Update, context: CallbackContext):
    context.user_data.clear()
    keyboard = list(InlineKeyboardButton(dict_[0], callback_data=i) for i, dict_ in enumerate(dicts))
    keys_in_row = 2
    reply_markup = InlineKeyboardMarkup([keyboard[i:i + keys_in_row] for i in range(0, len(keyboard), keys_in_row)])
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text='–ü—Ä–∏–≤–µ—Ç! ‚úå\n–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ, –∞ —Ç—ã –±—É–¥–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–∞.\n'
                                  '–í—ã–±–µ—Ä–∏ –Ω–∞–±–æ—Ä —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å',
                             reply_markup=reply_markup)
    return SELECT


def show(update: Update, context: CallbackContext):
    if len(context.user_data['incorrect']) < 1:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='ü§© –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –£ —Ç–µ–±—è –Ω–µ—Ç –æ—à–∏–±–æ–∫!')
    else:
        mistakes = []
        for correct, incorrect in context.user_data['incorrect']:
            mistakes.append((correct.replace("-", "\\-"), incorrect.replace("-", "\\-")))
        context.bot.send_message(chat_id=update.effective_chat.id, parse_mode='MarkdownV2',
                                 text='–¢–≤–æ–∏ –æ—à–∏–±–∫–∏:\n'
                                      + ',\n'.join(f'*{correct}* \(~{incorrect}~\)' for correct, incorrect in mistakes))
    return ConversationHandler.END


def fix(update: Update, context: CallbackContext):
    if len(context.user_data['incorrect']) < 1:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='ü§© –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –£ —Ç–µ–±—è –Ω–µ—Ç –æ—à–∏–±–æ–∫!')
        return ConversationHandler.END
    incorrect = context.user_data['incorrect']
    context.user_data.clear()
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text='‚úè –ü–æ–µ—Ö–∞–ª–∏!\n'
                                  f'–¢—ã —Ä–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ ({len(incorrect)} —Å–ª–æ–≤)')
    context.user_data['sample'] = list(x[0] for x in incorrect)
    play(update, context)
    return PLAYING


def play(update: Update, context: CallbackContext):
    if 'last_word' in context.user_data:
        context.user_data['word'] += 1
        correct = context.user_data['last_word'].strip().lower()
        user_input = update.message.text.strip().lower()
        if correct.replace('—ë', '–µ') != user_input.replace('—ë', '–µ'):
            text = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!"
            context.user_data['incorrect'].append((correct, user_input))
        else:
            text = "‚úÖ –í–µ—Ä–Ω–æ!"
        left = len(context.user_data['sample']) - context.user_data['word']
        context.bot.send_message(chat_id=update.effective_chat.id, parse_mode='markdown',
                                 text=f"{text}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{context.user_data['last_word'].lower()}*\n" +
                                      (f"–û—Å—Ç–∞–ª–æ—Å—å {left} —Å–ª–æ–≤.\n"
                                       f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å, —Ç–æ –Ω–∞–ø–∏—à–∏ /stop" if left > 0 else ''))
    else:
        context.user_data['word'] = 0
        context.user_data['incorrect'] = []

    if context.user_data['word'] >= len(context.user_data['sample']):
        return stop(update, context, True)
    context.user_data['last_word'] = context.user_data['sample'][context.user_data['word']]
    send_word(context.bot, update.effective_chat.id, context.user_data['last_word'])
    return PLAYING


def send_word(bot, chat_id, word):
    tts = gTTS(word, lang='ru')
    name = str(uuid.uuid4())
    tts.save(name)
    bot.send_voice(chat_id=chat_id, voice=open(name, 'rb'))
    os.remove(name)


def stop(update: Update, context: CallbackContext, win=False):
    correct_words = context.user_data['word'] - len(context.user_data['incorrect'])
    if context.user_data['word'] < 1:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text="ü§ì –•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=("ü•≥ –£—Ä–∞, —Å–ª–æ–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!" if win else "üëå –•–æ—Ä–æ—à–æ, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º.") +
                                      f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {correct_words}/{context.user_data['word']} "
                                      f"({round(correct_words / context.user_data['word'] * 100)}%)\n"
                                      f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, —Ç–æ –Ω–∞–ø–∏—à–∏ /start\n"
                                      f"–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏, –Ω–∞–ø–∏—à–∏ /fix, "
                                      f"–∞ —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ —É–∑–Ω–∞—Ç—å –≥–¥–µ —Ç—ã –æ—à–∏–±—Å—è, –Ω–∞–ø–∏—à–∏ /show")
    return GAME_OVER


def select(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    dict_ = dicts[int(query.data)]
    context.user_data['sample'] = dict_[1]\
        .sample(frac=1, random_state=seed()) \
        .reset_index(drop=True)

    context.bot.send_message(chat_id=update.effective_chat.id, parse_mode='markdown',
                             text='‚úè –ü–æ–µ—Ö–∞–ª–∏!\n'
                                  f'–¢—ã –≤—ã–±—Ä–∞–ª —Å–ª–æ–≤–∞—Ä—å *{dict_[0]}*, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(dict_[1])} —Å–ª–æ–≤')
    play(update, context)
    return PLAYING


restart = MessageHandler(filters=(~Filters.command | Filters.regex('/start')), callback=start)
conv_handler = ConversationHandler(
    entry_points=[restart],
    states={
        PLAYING: [MessageHandler(filters=~Filters.command, callback=play)],
        SELECT: [CallbackQueryHandler(select)],
        GAME_OVER: [CommandHandler('fix', fix), CommandHandler('show', show), restart]
    },
    fallbacks=[CommandHandler('stop', stop)]
)

dispatcher.add_handler(conv_handler)

updater.start_polling()
updater.idle()
